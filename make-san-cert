#!/usr/bin/env python3

import os
import sys
import re

ROOT = os.path.dirname(os.path.realpath(__file__))

def undent(s):
  return re.sub('\n +','\n',s.lstrip())

class Config:

    def __init__(self, subject, names):
        self.subject = subject
        self.names   = names
        self.is_san  = len(names) > 0

    def san(self):
        sans = list(enumerate(self.names, 1))
        dns = [f"DNS.{i} = {n}" for i,n in sans if re.match("^\D", n)]
        ips = [f"IP.{i} = {n}" for i,n in sans if re.match("^\d", n)]
        return "\n".join(dns + ips)

    def text(self):
        with open(os.path.join(ROOT, 'dn.conf'), 'r') as f:
            dn = f.read()
        if self.is_san:
            block = self.san()
        else:
            block = ""
        return block

def xconfig(subject, names):
    with open(os.path.join(ROOT, 'dn.conf'), 'r') as f:
        dn = f.read()
    sans = list(enumerate(names, 1))
    dns = [f"DNS.{i} = {n}" for i,n in sans if re.match("^\D", n)]
    ips = [f"IP.{i} = {n}" for i,n in sans if re.match("^\d", n)]
    block = "\n".join(dns + ips)
    text = undent(f"""
        [req]
        distinguished_name = dn
        req_extensions = v3_req
        default_bits = 2048
        default_md = sha256
        prompt = no
        [dn]
        {dn}
        CN = {subject}
        [v3_req]
        keyUsage = keyEncipherment, dataEncipherment
        extendedKeyUsage = serverAuth
        subjectAltName = @alt_names
        [alt_names]
        {block}
        """)
    with open(f"{subject}.cnf", 'w') as f:
      f.write(text)

def key(subject):
    os.system(f"openssl genrsa -out {subject}.key 4096")

def csr(subject, names):
    config(subject, names)
    os.system("openssl req"
             f" -new -nodes -sha256"
             f" -key {subject}.key"
             f" -config {subject}.cnf"
             f" -out {subject}.csr")

def sign(subject):
    os.system("openssl x509"
             f" -req -days 3650 -sha256"
             f" -in {subject}.csr"
             f" -extfile {subject}.cnf"
             f" -extensions v3_req"
             f" -CA cacert.pem -CAkey private/cakey.key"
             f" -CAcreateserial"
             f" -out {subject}.crt")

subject = sys.argv[1]
names = sys.argv[2:]

config = Config(subject, names)
print(config.text())
exit(0)

key(subject)
csr(subject, names)
sign(subject)
